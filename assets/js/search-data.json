{
  
    
        "post0": {
            "title": "Title",
            "content": "import pandas as pd import numpy as np import matplotlib.pyplot as plt import plotly.express as px from fbprophet import Prophet from sklearn.metrics import r2_score plt.style.use(&quot;ggplot&quot;) df0 = pd.read_csv(&quot;./input/CONVENIENT_global_confirmed_cases.csv&quot;) df1 = pd.read_csv(&quot;./input/CONVENIENT_global_deaths.csv&quot;) df2 = pd.read_csv(&quot;./input/CONVENIENT_us_confirmed_cases.csv&quot;) df3 = pd.read_csv(&quot;./input/CONVENIENT_us_deaths.csv&quot;) . /Users/xucheng/dev/da-venv/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3165: DtypeWarning: Columnshave mixed types.Specify dtype option on import or set low_memory=False. . df0 . Country/Region Afghanistan Albania Algeria Andorra Angola Antigua and Barbuda Argentina Armenia Australia ... United Kingdom.11 Uruguay Uzbekistan Vanuatu Venezuela Vietnam West Bank and Gaza Yemen Zambia Zimbabwe . 0 Province/State | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | Australian Capital Territory | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 1/23/20 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 1/24/20 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 1/25/20 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 4 1/26/20 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 434 3/31/21 | 70.0 | 434.0 | 131.0 | 66.0 | 129.0 | 0.0 | 16056.0 | 1148.0 | 0.0 | ... | 4052.0 | 3088.0 | 187.0 | 0.0 | 1348.0 | 9.0 | 2288.0 | 110.0 | 219.0 | 43.0 | . 435 4/1/21 | 63.0 | 349.0 | 112.0 | 43.0 | 88.0 | 11.0 | 14430.0 | 1097.0 | 0.0 | ... | 4478.0 | 2639.0 | 181.0 | 0.0 | 1254.0 | 14.0 | 2292.0 | 174.0 | 131.0 | 14.0 | . 436 4/2/21 | 55.0 | 336.0 | 125.0 | 62.0 | 68.0 | 5.0 | 9902.0 | 1116.0 | 0.0 | ... | 3402.0 | 3380.0 | 189.0 | 0.0 | 979.0 | 3.0 | 2248.0 | 89.0 | 181.0 | 7.0 | . 437 4/3/21 | 23.0 | 341.0 | 95.0 | 59.0 | 112.0 | 18.0 | 10384.0 | 1192.0 | 0.0 | ... | 3423.0 | 2336.0 | 196.0 | 0.0 | 1607.0 | 6.0 | 1589.0 | 77.0 | 70.0 | 8.0 | . 438 4/4/21 | 81.0 | 348.0 | 98.0 | 57.0 | 52.0 | 0.0 | 9955.0 | 590.0 | 0.0 | ... | 2297.0 | 3853.0 | 188.0 | 0.0 | 1786.0 | 5.0 | 2806.0 | 101.0 | 130.0 | 12.0 | . 439 rows × 275 columns . df1 . Country/Region Afghanistan Albania Algeria Andorra Angola Antigua and Barbuda Argentina Armenia Australia ... United Kingdom.11 Uruguay Uzbekistan Vanuatu Venezuela Vietnam West Bank and Gaza Yemen Zambia Zimbabwe . 0 Province/State | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | Australian Capital Territory | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 1/23/20 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 1/24/20 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 1/25/20 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 4 1/26/20 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 434 3/31/21 | 8.0 | 8.0 | 4.0 | 0.0 | 1.0 | 0.0 | 122.0 | 18.0 | 0.0 | ... | 43.0 | 21.0 | 1.0 | 0.0 | 13.0 | 0.0 | 13.0 | 6.0 | 6.0 | 3.0 | . 435 4/1/21 | 5.0 | 6.0 | 3.0 | 0.0 | 1.0 | 0.0 | 83.0 | 18.0 | 0.0 | ... | 51.0 | 35.0 | 1.0 | 0.0 | 13.0 | 0.0 | 18.0 | 18.0 | 4.0 | 0.0 | . 436 4/2/21 | 6.0 | 6.0 | 3.0 | 1.0 | 0.0 | 0.0 | 82.0 | 19.0 | 0.0 | ... | 52.0 | 32.0 | 0.0 | 0.0 | 14.0 | 0.0 | 16.0 | 10.0 | 3.0 | 1.0 | . 437 4/3/21 | 1.0 | 9.0 | 3.0 | 1.0 | 2.0 | 0.0 | 83.0 | 23.0 | 0.0 | ... | 10.0 | 30.0 | 0.0 | 0.0 | 18.0 | 0.0 | 20.0 | 16.0 | 0.0 | 0.0 | . 438 4/4/21 | 1.0 | 9.0 | 3.0 | 0.0 | 2.0 | 0.0 | 93.0 | 17.0 | 0.0 | ... | 10.0 | 30.0 | 1.0 | 0.0 | 15.0 | 0.0 | 25.0 | 14.0 | 5.0 | 1.0 | . 439 rows × 275 columns . world = pd.DataFrame({&quot;Country&quot;:[],&quot;Cases&quot;:[]}) world[&quot;Country&quot;] = df_confirmed.iloc[:,1:].columns #world[&quot;Country&quot;] = df_confirmed.iloc[:1,1:].keys() cases = [] world . Country Cases . 0 Afghanistan | NaN | . 1 Albania | NaN | . 2 Algeria | NaN | . 3 Andorra | NaN | . 4 Angola | NaN | . ... ... | ... | . 269 Vietnam | NaN | . 270 West Bank and Gaza | NaN | . 271 Yemen | NaN | . 272 Zambia | NaN | . 273 Zimbabwe | NaN | . 274 rows × 2 columns . print(df0.info()) print(df1.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 439 entries, 0 to 438 Columns: 275 entries, Country/Region to Zimbabwe dtypes: float64(189), object(86) memory usage: 943.3+ KB None &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 439 entries, 0 to 438 Columns: 275 entries, Country/Region to Zimbabwe dtypes: float64(189), object(86) memory usage: 943.3+ KB None . print(df0.describe()) print(df1.describe()) . Afghanistan Albania Algeria Andorra Angola count 438.000000 438.000000 438.000000 438.000000 438.000000 mean 129.397260 288.883562 268.543379 27.924658 51.668950 std 188.258907 329.859387 242.821641 43.353650 64.362052 min 0.000000 0.000000 0.000000 0.000000 0.000000 25% 17.250000 17.000000 112.000000 0.000000 1.000000 50% 59.000000 133.500000 191.500000 8.000000 32.000000 75% 165.750000 536.500000 391.750000 42.750000 77.000000 max 1485.000000 1239.000000 1133.000000 299.000000 355.000000 Antigua and Barbuda Argentina Armenia Austria count 438.000000 438.000000 438.000000 438.000000 mean 2.671233 5464.593607 448.936073 1275.696347 std 8.683430 4757.985846 534.242457 1717.546081 min -1.000000 0.000000 0.000000 0.000000 25% 0.000000 255.750000 83.500000 61.750000 50% 0.000000 5317.000000 254.000000 422.000000 75% 1.000000 8878.500000 579.250000 1919.250000 max 82.000000 18326.000000 2476.000000 9586.000000 Azerbaijan ... United Kingdom.11 Uruguay Uzbekistan count 438.000000 ... 438.000000 438.000000 438.000000 mean 618.116438 ... 9952.940639 268.851598 190.920091 std 1020.377636 ... 13482.519983 547.666469 212.983096 min 0.000000 ... 0.000000 -21.000000 0.000000 25% 76.000000 ... 941.000000 5.000000 33.250000 50% 186.000000 ... 4030.000000 17.000000 98.000000 75% 547.750000 ... 15611.000000 379.750000 298.500000 max 4451.000000 ... 68053.000000 3853.000000 981.000000 Vanuatu Venezuela Vietnam West Bank and Gaza Yemen count 438.000000 438.000000 438.000000 438.000000 438.000000 mean 0.006849 379.276256 6.006849 573.716895 10.954338 std 0.106746 353.331479 11.603379 660.812548 23.463643 min 0.000000 0.000000 0.000000 0.000000 -1.000000 25% 0.000000 16.500000 0.000000 5.250000 0.000000 50% 0.000000 352.000000 2.000000 387.000000 1.000000 75% 0.000000 567.500000 6.000000 761.750000 10.000000 max 2.000000 1786.000000 110.000000 2806.000000 174.000000 Zambia Zimbabwe count 438.000000 438.000000 mean 203.036530 84.299087 std 357.327614 181.512977 min 0.000000 -6.000000 25% 0.000000 1.000000 50% 44.000000 20.000000 75% 213.750000 78.750000 max 1796.000000 1365.000000 [8 rows x 189 columns] Afghanistan Albania Algeria Andorra Angola count 438.000000 438.000000 438.000000 438.000000 438.000000 mean 5.700913 5.171233 7.089041 0.267123 1.237443 std 7.710705 5.638247 5.239685 0.682817 1.659386 min 0.000000 0.000000 0.000000 0.000000 -3.000000 25% 0.000000 0.000000 3.000000 0.000000 0.000000 50% 3.000000 4.000000 7.000000 0.000000 1.000000 75% 8.000000 8.000000 10.000000 0.000000 2.000000 max 46.000000 21.000000 30.000000 6.000000 12.000000 Antigua and Barbuda Argentina Armenia Austria Azerbaijan count 438.000000 438.000000 438.000000 438.000000 438.000000 mean 0.063927 128.308219 8.200913 21.573059 8.394977 std 0.352208 198.186973 8.838277 32.526953 11.694105 min 0.000000 0.000000 0.000000 -1.000000 0.000000 25% 0.000000 9.250000 1.000000 0.000000 1.000000 50% 0.000000 92.500000 5.000000 6.000000 3.000000 75% 0.000000 193.250000 12.000000 29.750000 9.000000 max 5.000000 3351.000000 41.000000 218.000000 47.000000 ... United Kingdom.11 Uruguay Uzbekistan Vanuatu Venezuela count ... 438.000000 438.000000 438.000000 438.0 438.000000 mean ... 289.579909 2.513699 1.440639 0.0 3.794521 std ... 367.943940 5.032939 2.156336 0.0 3.475151 min ... 0.000000 0.000000 0.000000 0.0 -6.000000 25% ... 17.000000 0.000000 0.000000 0.0 0.000000 50% ... 130.500000 0.000000 0.000000 0.0 4.000000 75% ... 458.000000 2.000000 3.000000 0.0 6.000000 max ... 1820.000000 35.000000 8.000000 0.0 18.000000 Vietnam West Bank and Gaza Yemen Zambia Zimbabwe count 438.000000 438.000000 438.000000 438.000000 438.000000 mean 0.079909 6.178082 2.159817 2.785388 3.481735 std 0.412070 7.834400 4.925257 5.829740 8.703527 min -1.000000 0.000000 0.000000 0.000000 0.000000 25% 0.000000 0.000000 0.000000 0.000000 0.000000 50% 0.000000 3.000000 0.000000 0.000000 0.000000 75% 0.000000 9.000000 2.000000 3.000000 2.000000 max 3.000000 31.000000 52.000000 67.000000 70.000000 [8 rows x 189 columns] . world = pd.DataFrame({&quot;Country&quot;:[],&quot;Cases&quot;:[]}) world[&quot;Country&quot;] = df0.iloc[:,1:].columns cases = [] for i in world[&quot;Country&quot;]: cases.append(pd.to_numeric(df0[i][1:]).sum()) world[&quot;Cases&quot;]=cases country_list=list(world[&quot;Country&quot;].values) idx = 0 for i in country_list: sayac = 0 for j in i: if j==&quot;.&quot;: i = i[:sayac] country_list[idx]=i elif j==&quot;(&quot;: i = i[:sayac-1] country_list[idx]=i else: sayac += 1 idx += 1 world[&quot;Country&quot;]=country_list world = world.groupby(&quot;Country&quot;)[&quot;Cases&quot;].sum().reset_index() world.head() continent=pd.read_csv(&quot;./input/continents2.csv&quot;) continent[&quot;name&quot;]=continent[&quot;name&quot;].str.upper() continent[&quot;name&quot;] . 0 AFGHANISTAN 1 ÅLAND ISLANDS 2 ALBANIA 3 ALGERIA 4 AMERICAN SAMOA ... 244 WALLIS AND FUTUNA 245 WESTERN SAHARA 246 YEMEN 247 ZAMBIA 248 ZIMBABWE Name: name, Length: 249, dtype: object . world[&quot;Cases Range&quot;]=pd.cut(world[&quot;Cases&quot;],[-150000,50000,200000,800000,1500000,15000000],labels=[&quot;U50K&quot;,&quot;50Kto200K&quot;,&quot;200Kto800K&quot;,&quot;800Kto1.5M&quot;,&quot;1.5M+&quot;]) alpha =[] for i in world[&quot;Country&quot;].str.upper().values: if i == &quot;BRUNEI&quot;: i=&quot;BRUNEI DARUSSALAM&quot; elif i==&quot;US&quot;: i=&quot;UNITED STATES&quot; if len(continent[continent[&quot;name&quot;]==i][&quot;alpha-3&quot;].values)==0: alpha.append(np.nan) else: alpha.append(continent[continent[&quot;name&quot;]==i][&quot;alpha-3&quot;].values[0]) world[&quot;Alpha3&quot;]=alpha fig = px.choropleth(world.dropna(), locations=&quot;Alpha3&quot;, color=&quot;Cases Range&quot;, projection=&quot;mercator&quot;, color_discrete_sequence=[&quot;white&quot;,&quot;khaki&quot;,&quot;yellow&quot;,&quot;orange&quot;,&quot;red&quot;]) fig.update_geos(fitbounds=&quot;locations&quot;, visible=False) fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.show() . count = [] for i in range(1,len(df_confirmed)): count.append(sum(pd.to_numeric(df_confirmed.iloc[i,1:].values))) df = pd.DataFrame() df[&quot;Date&quot;] = df_confirmed[&quot;Country/Region&quot;][1:] df[&quot;Cases&quot;] = count df=df.set_index(&quot;Date&quot;) count = [] for i in range(1,len(df_death)): count.append(sum(pd.to_numeric(df_death.iloc[i,1:].values))) df[&quot;Deaths&quot;] = count df.Cases.plot(title=&quot;Daily Covid19 Cases in World&quot;,marker=&quot;.&quot;,figsize=(10,5),label=&quot;daily cases&quot;) df.Cases.rolling(window=5).mean().plot(figsize=(10,5),label=&quot;MA5&quot;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Daily Covid19 Cases in World&#39;}, xlabel=&#39;Date&#39;&gt; . class Fbprophet(object): def fit(self,data): self.data = data self.model = Prophet(weekly_seasonality=True,daily_seasonality=False,yearly_seasonality=False) self.model.fit(self.data) def forecast(self,periods,freq): self.future = self.model.make_future_dataframe(periods=periods,freq=freq) self.df_forecast = self.model.predict(self.future) def plot(self,xlabel=&quot;Years&quot;,ylabel=&quot;Values&quot;): self.model.plot(self.df_forecast,xlabel=xlabel,ylabel=ylabel,figsize=(9,4)) self.model.plot_components(self.df_forecast,figsize=(9,6)) def R2(self): return r2_score(self.data.y, self.df_forecast.yhat[:len(df)]) df_fb = pd.DataFrame({&quot;ds&quot;:[],&quot;y&quot;:[]}) df_fb[&quot;ds&quot;] = pd.to_datetime(df.index) df_fb[&quot;y&quot;] = df.iloc[:,0].values model = Fbprophet() model.fit(df_fb) model.forecast(30,&quot;D&quot;) model.R2() forecast = model.df_forecast[[&quot;ds&quot;,&quot;yhat_lower&quot;,&quot;yhat_upper&quot;,&quot;yhat&quot;]].tail(30).reset_index().set_index(&quot;ds&quot;).drop(&quot;index&quot;,axis=1) forecast[&quot;yhat&quot;].plot(marker=&quot;.&quot;,figsize=(10,5)) plt.fill_between(x=forecast.index, y1=forecast[&quot;yhat_lower&quot;], y2=forecast[&quot;yhat_upper&quot;],color=&quot;gray&quot;) plt.legend([&quot;forecast&quot;,&quot;Bound&quot;],loc=&quot;upper left&quot;) plt.title(&quot;Forecasting of Next 30 Days Cases&quot;) plt.show() . US Cases Exploration . https://www.kaggle.com/chapagain/covid-19-usa-eda-chart-graph-map/execution . df_us_test = pd.read_csv(&quot;./input/us_covid19_daily.csv&quot;) df_us_states_test = pd.read_csv(&quot;./input/us_states_covid19_daily.csv&quot;) . df_cases_state = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_state.csv&quot;) . state_map_dict = { &#39;AL&#39;: &#39;Alabama&#39;, &#39;AK&#39;: &#39;Alaska&#39;, &#39;AS&#39;: &#39;American Samoa&#39;, &#39;AZ&#39;: &#39;Arizona&#39;, &#39;AR&#39;: &#39;Arkansas&#39;, &#39;CA&#39;: &#39;California&#39;, &#39;CO&#39;: &#39;Colorado&#39;, &#39;CT&#39;: &#39;Connecticut&#39;, &#39;DE&#39;: &#39;Delaware&#39;, &#39;DC&#39;: &#39;District of Columbia&#39;, &#39;D.C.&#39;: &#39;District of Columbia&#39;, &#39;FM&#39;: &#39;Federated States of Micronesia&#39;, &#39;FL&#39;: &#39;Florida&#39;, &#39;GA&#39;: &#39;Georgia&#39;, &#39;GU&#39;: &#39;Guam&#39;, &#39;HI&#39;: &#39;Hawaii&#39;, &#39;ID&#39;: &#39;Idaho&#39;, &#39;IL&#39;: &#39;Illinois&#39;, &#39;IN&#39;: &#39;Indiana&#39;, &#39;IA&#39;: &#39;Iowa&#39;, &#39;KS&#39;: &#39;Kansas&#39;, &#39;KY&#39;: &#39;Kentucky&#39;, &#39;LA&#39;: &#39;Louisiana&#39;, &#39;ME&#39;: &#39;Maine&#39;, &#39;MH&#39;: &#39;Marshall Islands&#39;, &#39;MD&#39;: &#39;Maryland&#39;, &#39;MA&#39;: &#39;Massachusetts&#39;, &#39;MI&#39;: &#39;Michigan&#39;, &#39;MN&#39;: &#39;Minnesota&#39;, &#39;MS&#39;: &#39;Mississippi&#39;, &#39;MO&#39;: &#39;Missouri&#39;, &#39;MT&#39;: &#39;Montana&#39;, &#39;NE&#39;: &#39;Nebraska&#39;, &#39;NV&#39;: &#39;Nevada&#39;, &#39;NH&#39;: &#39;New Hampshire&#39;, &#39;NJ&#39;: &#39;New Jersey&#39;, &#39;NM&#39;: &#39;New Mexico&#39;, &#39;NY&#39;: &#39;New York&#39;, &#39;NC&#39;: &#39;North Carolina&#39;, &#39;ND&#39;: &#39;North Dakota&#39;, &#39;MP&#39;: &#39;Northern Mariana Islands&#39;, &#39;OH&#39;: &#39;Ohio&#39;, &#39;OK&#39;: &#39;Oklahoma&#39;, &#39;OR&#39;: &#39;Oregon&#39;, &#39;PW&#39;: &#39;Palau&#39;, &#39;PA&#39;: &#39;Pennsylvania&#39;, &#39;PR&#39;: &#39;Puerto Rico&#39;, &#39;RI&#39;: &#39;Rhode Island&#39;, &#39;SC&#39;: &#39;South Carolina&#39;, &#39;SD&#39;: &#39;South Dakota&#39;, &#39;TN&#39;: &#39;Tennessee&#39;, &#39;TX&#39;: &#39;Texas&#39;, &#39;UT&#39;: &#39;Utah&#39;, &#39;VT&#39;: &#39;Vermont&#39;, &#39;VI&#39;: &#39;Virgin Islands&#39;, &#39;VA&#39;: &#39;Virginia&#39;, &#39;WA&#39;: &#39;Washington&#39;, &#39;WV&#39;: &#39;West Virginia&#39;, &#39;WI&#39;: &#39;Wisconsin&#39;, &#39;WY&#39;: &#39;Wyoming&#39; } state_code_dict = {v:k for k, v in state_map_dict.items()} state_code_dict[&quot;Chicago&quot;] = &#39;Illinois&#39; def correct_state_names(x): try: return state_map_dict[x.split(&quot;,&quot;)[-1].strip()] except: return x.strip() def get_state_codes(x): try: return state_code_dict[x] except: return &quot;Others&quot; def get_state_name(x): try: for name, code in state_code_dict.items(): if code == x: return name return &#39;Others&#39; except: return &quot;Others&quot; . df_us_states = df_cases_state[df_cases_state[&#39;Country_Region&#39;] == &#39;US&#39;].copy() df_us_states[&quot;State_Code&quot;] = df_us_states[&quot;Province_State&quot;].apply(lambda x: get_state_codes(x)) . import plotly.graph_objects as go . fig = go.Figure(data=[go.Pie(labels=df_us_states[&#39;Province_State&#39;], values=df_us_states[&#39;Confirmed&#39;], hole=.35, textinfo=&#39;label+percent&#39; ) ]) fig.update_layout( title_text=&quot;US Confirmed Cases by States&quot;, # Add annotations in the center of the donut pies. annotations=[ dict(text=&#39;Confirmed&lt;br&gt;Cases&#39;, showarrow=False), ] ) fig.update_traces(textposition=&#39;inside&#39;) fig.update_layout(margin={&quot;r&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.show() . fig = go.Figure(data=[ go.Pie(labels=df_us_states[&#39;Province_State&#39;], values=df_us_states[&#39;Deaths&#39;], hole=.35, textinfo=&#39;label+percent&#39; ) ]) fig.update_layout( title_text=&quot;US Deaths Cases by States&quot;, # Add annotations in the center of the donut pies. annotations=[ dict(text=&#39;Deaths&lt;br&gt;Cases&#39;, showarrow=False), ] ) fig.update_traces(textposition=&#39;inside&#39;) fig.update_layout(margin={&quot;r&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.show() . df_confirmed_top = df_us_states.sort_values(&#39;Confirmed&#39;, ascending=False).head(10) fig = go.Figure(data=[ go.Bar(name=&#39;Confirmed&#39;, x=df_confirmed_top[&#39;Province_State&#39;], y=df_confirmed_top[&#39;Confirmed&#39;], text=df_confirmed_top[&#39;Confirmed&#39;], texttemplate=&#39;%{text:.2s}&#39;, textposition=&#39;outside&#39;), go.Bar(name=&#39;Deaths&#39;, x=df_confirmed_top[&#39;Province_State&#39;], y=df_confirmed_top[&#39;Deaths&#39;], text=df_confirmed_top[&#39;Deaths&#39;], texttemplate=&#39;%{text:.2s}&#39;, textposition=&#39;outside&#39;), go.Bar(name=&#39;Recovered&#39;, x=df_confirmed_top[&#39;Province_State&#39;], y=df_confirmed_top[&#39;Recovered&#39;], text=df_confirmed_top[&#39;Recovered&#39;], texttemplate=&#39;%{text:.2s}&#39;, textposition=&#39;outside&#39;), #go.Bar(name=&#39;People Tested&#39;, x=df_confirmed_top[&#39;Province_State&#39;], y=df_confirmed_top[&#39;People_Tested&#39;], # text=df_confirmed_top[&#39;People_Tested&#39;], texttemplate=&#39;%{text:.2s}&#39;, textposition=&#39;outside&#39;), ]) # Change the bar mode fig.update_layout( title_text=&quot;Top 10 US States with Confirmed Cases&quot;, barmode=&#39;group&#39;, #legend_orientation=&quot;h&quot;, yaxis_type=&#39;log&#39;, yaxis_title=&#39;Cases Count in Log Scale&#39; ) fig.update_layout(legend_orientation=&quot;h&quot;, legend=dict(x=0, y=1.1)) fig.update_layout(margin={&quot;r&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.show() . df_us_states . Province_State Country_Region Last_Update Lat Long_ Confirmed Deaths Recovered Active FIPS Incident_Rate People_Tested People_Hospitalized Mortality_Rate UID ISO3 Testing_Rate Hospitalization_Rate State_Code . 492 Alabama | US | 2021-04-11 18:31:04 | 32.3182 | -86.9023 | 518899 | 10712 | NaN | NaN | 1.0 | 10582.896627 | 2436418.0 | NaN | 2.064371 | 84000001.0 | USA | 49690.517490 | NaN | AL | . 493 Alaska | US | 2021-04-11 18:31:04 | 61.3707 | -152.4044 | 64782 | 313 | NaN | NaN | 2.0 | 8855.504446 | 1966048.0 | NaN | 0.483159 | 84000002.0 | USA | 268752.845006 | NaN | AK | . 494 American Samoa | US | 2021-04-11 18:31:04 | -14.2710 | -170.1320 | 0 | 0 | NaN | NaN | 60.0 | 0.000000 | 2140.0 | NaN | NaN | 16.0 | ASM | 3846.084722 | NaN | AS | . 495 Arizona | US | 2021-04-11 18:31:04 | 33.7298 | -111.4312 | 849021 | 17092 | NaN | NaN | 4.0 | 11664.432070 | 8761941.0 | NaN | 2.013142 | 84000004.0 | USA | 120377.547307 | NaN | AZ | . 496 Arkansas | US | 2021-04-11 18:31:04 | 34.9697 | -92.3731 | 332053 | 5661 | NaN | NaN | 5.0 | 11003.133404 | 2898574.0 | NaN | 1.704848 | 84000005.0 | USA | 96049.113859 | NaN | AR | . 497 California | US | 2021-04-11 18:31:04 | 36.1162 | -119.6816 | 3698160 | 60444 | NaN | NaN | 6.0 | 9359.534137 | 56078860.0 | NaN | 1.634434 | 84000006.0 | USA | 141927.878874 | NaN | CA | . 498 Colorado | US | 2021-04-11 18:31:04 | 39.0598 | -105.3111 | 477443 | 6155 | NaN | NaN | 8.0 | 8290.760334 | 7269129.0 | NaN | 1.289159 | 84000008.0 | USA | 126227.856252 | NaN | CO | . 499 Connecticut | US | 2021-04-11 18:31:04 | 41.5978 | -72.7554 | 321586 | 7944 | NaN | NaN | 9.0 | 9019.919014 | 7476439.0 | NaN | 2.470257 | 84000009.0 | USA | 209700.902059 | NaN | CT | . 500 Delaware | US | 2021-04-11 18:31:04 | 39.3185 | -75.5071 | 98570 | 1578 | NaN | NaN | 10.0 | 10122.575901 | 1620589.0 | NaN | 1.600893 | 84000010.0 | USA | 166425.232397 | NaN | DE | . 501 Diamond Princess | US | 2021-04-11 18:31:04 | NaN | NaN | 49 | 0 | NaN | NaN | 88888.0 | NaN | NaN | NaN | 0.000000 | 84088888.0 | USA | NaN | NaN | Others | . 502 District of Columbia | US | 2021-04-11 18:31:04 | 38.8974 | -77.0268 | 45830 | 1081 | NaN | NaN | 11.0 | 6493.810122 | 1423475.0 | NaN | 2.358717 | 84000011.0 | USA | 201697.062270 | NaN | D.C. | . 503 Florida | US | 2021-04-11 18:31:04 | 27.7663 | -81.6868 | 2124068 | 34039 | NaN | NaN | 12.0 | 9889.626640 | 21476893.0 | NaN | 1.602538 | 84000012.0 | USA | 99996.070349 | NaN | FL | . 504 Georgia | US | 2021-04-11 18:31:04 | 33.0406 | -83.6431 | 1072700 | 19488 | NaN | NaN | 13.0 | 10103.204893 | 7975847.0 | NaN | 1.816724 | 84000013.0 | USA | 75120.365836 | NaN | GA | . 505 Grand Princess | US | 2021-04-11 18:31:04 | NaN | NaN | 103 | 3 | NaN | NaN | 99999.0 | NaN | NaN | NaN | 2.912621 | 84099999.0 | USA | NaN | NaN | Others | . 506 Guam | US | 2021-04-11 18:31:04 | 13.4443 | 144.7937 | 7833 | 136 | NaN | NaN | 66.0 | 4769.559578 | 134339.0 | NaN | 1.736244 | 316.0 | GUM | 81799.803932 | NaN | GU | . 507 Hawaii | US | 2021-04-11 18:31:04 | 21.0943 | -157.4983 | 31975 | 471 | NaN | NaN | 15.0 | 2258.325611 | 1328203.0 | NaN | 1.473026 | 84000015.0 | USA | 93808.126723 | NaN | HI | . 508 Idaho | US | 2021-04-11 18:31:04 | 44.2405 | -114.4788 | 183153 | 1993 | NaN | NaN | 16.0 | 10248.815796 | 685952.0 | NaN | 1.088161 | 84000016.0 | USA | 38384.278132 | NaN | ID | . 509 Illinois | US | 2021-04-11 18:31:04 | 40.3495 | -88.9861 | 1279665 | 23793 | NaN | NaN | 17.0 | 10098.509125 | 21102407.0 | NaN | 1.859315 | 84000017.0 | USA | 166530.185362 | NaN | IL | . 510 Indiana | US | 2021-04-11 18:31:04 | 39.8494 | -86.2583 | 698692 | 13148 | NaN | NaN | 18.0 | 10378.331424 | 9187249.0 | NaN | 1.881802 | 84000018.0 | USA | 136466.876672 | NaN | IN | . 511 Iowa | US | 2021-04-11 18:31:04 | 42.0115 | -93.2105 | 356893 | 5857 | NaN | NaN | 19.0 | 11311.730009 | 1393075.0 | NaN | 1.641108 | 84000019.0 | USA | 44153.537006 | NaN | IA | . 512 Kansas | US | 2021-04-11 18:31:04 | 38.5266 | -96.7265 | 305773 | 4895 | NaN | NaN | 20.0 | 10495.710383 | 1335069.0 | NaN | 1.600861 | 84000020.0 | USA | 45826.471160 | NaN | KS | . 513 Kentucky | US | 2021-04-11 18:31:04 | 37.6681 | -84.6701 | 432720 | 6241 | NaN | NaN | 21.0 | 9685.579048 | 4393731.0 | NaN | 1.442272 | 84000021.0 | USA | 98344.954969 | NaN | KY | . 514 Louisiana | US | 2021-04-11 18:31:04 | 31.1695 | -91.8678 | 448838 | 10216 | NaN | NaN | 22.0 | 9654.934161 | 6186986.0 | NaN | 2.276100 | 84000022.0 | USA | 133087.979377 | NaN | LA | . 515 Maine | US | 2021-04-11 18:31:04 | 44.6939 | -69.3819 | 53960 | 750 | NaN | NaN | 23.0 | 4014.247753 | 1872183.0 | NaN | 1.389918 | 84000023.0 | USA | 139277.361012 | NaN | ME | . 516 Maryland | US | 2021-04-11 18:31:04 | 39.0639 | -76.8021 | 426730 | 8455 | NaN | NaN | 24.0 | 7058.428498 | 9090254.0 | NaN | 1.981347 | 84000024.0 | USA | 150359.496368 | NaN | MD | . 517 Massachusetts | US | 2021-04-11 18:31:04 | 42.2302 | -71.5301 | 657578 | 17379 | NaN | NaN | 25.0 | 9540.481883 | 19748011.0 | NaN | 2.642880 | 84000025.0 | USA | 286514.362054 | NaN | MA | . 518 Michigan | US | 2021-04-11 18:31:04 | 43.3266 | -84.5361 | 820404 | 17563 | NaN | NaN | 26.0 | 8214.836760 | 11938983.0 | NaN | 2.140775 | 84000026.0 | USA | 119546.950557 | NaN | MI | . 519 Minnesota | US | 2021-04-11 18:31:04 | 45.6945 | -93.9002 | 542053 | 7035 | NaN | NaN | 27.0 | 9611.495927 | 7978553.0 | NaN | 1.297844 | 84000027.0 | USA | 141472.936532 | NaN | MN | . 520 Mississippi | US | 2021-04-11 18:31:04 | 32.7416 | -89.6787 | 307332 | 7095 | NaN | NaN | 28.0 | 10326.499110 | 1845873.0 | NaN | 2.308578 | 84000028.0 | USA | 62022.197141 | NaN | MS | . 521 Missouri | US | 2021-04-11 18:31:04 | 38.4561 | -92.2884 | 588549 | 8884 | NaN | NaN | 29.0 | 9589.505571 | 5027327.0 | NaN | 1.509475 | 84000029.0 | USA | 81912.602478 | NaN | MO | . 522 Montana | US | 2021-04-11 18:31:04 | 46.9219 | -110.4544 | 106183 | 1523 | NaN | NaN | 30.0 | 9934.991177 | 1245182.0 | NaN | 1.434316 | 84000030.0 | USA | 116505.205010 | NaN | MT | . 523 Nebraska | US | 2021-04-11 18:31:04 | 41.1254 | -98.2681 | 214207 | 2220 | NaN | NaN | 31.0 | 11073.517066 | 2695720.0 | NaN | 1.036381 | 84000031.0 | USA | 139356.330205 | NaN | NE | . 524 Nevada | US | 2021-04-11 18:31:04 | 38.3135 | -117.0554 | 308024 | 5332 | NaN | NaN | 32.0 | 10000.272713 | 3043137.0 | NaN | 1.731034 | 84000032.0 | USA | 98798.145289 | NaN | NV | . 525 New Hampshire | US | 2021-04-11 18:31:04 | 43.4525 | -71.5639 | 88446 | 1256 | NaN | NaN | 33.0 | 6504.764615 | 1728015.0 | NaN | 1.420076 | 84000033.0 | USA | 127086.932444 | NaN | NH | . 526 New Jersey | US | 2021-04-11 18:31:04 | 40.2989 | -74.5210 | 953490 | 24870 | NaN | NaN | 34.0 | 10734.852553 | 12694233.0 | NaN | 2.608313 | 84000034.0 | USA | 142917.827698 | NaN | NJ | . 527 New Mexico | US | 2021-04-11 18:31:04 | 34.8405 | -106.2485 | 193368 | 3976 | NaN | NaN | 35.0 | 9221.925107 | 3079551.0 | NaN | 2.056183 | 84000035.0 | USA | 146867.054967 | NaN | NM | . 528 New York | US | 2021-04-11 18:31:04 | 42.1657 | -74.9481 | 1953953 | 51056 | NaN | NaN | 36.0 | 10044.191909 | 47244227.0 | NaN | 2.612959 | 84000036.0 | USA | 242856.446694 | NaN | NY | . 529 North Carolina | US | 2021-04-11 18:31:04 | 35.6301 | -79.8064 | 929406 | 12248 | NaN | NaN | 37.0 | 8861.542299 | 10765561.0 | NaN | 1.317831 | 84000037.0 | USA | 102645.640519 | NaN | NC | . 530 North Dakota | US | 2021-04-11 18:31:04 | 47.5289 | -99.7840 | 104745 | 1502 | NaN | NaN | 38.0 | 13744.944637 | 1485211.0 | NaN | 1.433959 | 84000038.0 | USA | 194893.722558 | NaN | ND | . 531 Northern Mariana Islands | US | 2021-04-11 18:31:04 | 15.0979 | 145.6739 | 160 | 2 | NaN | NaN | 69.0 | 290.149427 | 17542.0 | NaN | 1.250000 | 580.0 | MNP | 31811.257798 | NaN | MP | . 532 Ohio | US | 2021-04-11 18:31:04 | 40.3888 | -82.7649 | 1037600 | 18827 | NaN | NaN | 39.0 | 8876.645764 | 11310109.0 | NaN | 1.814476 | 84000039.0 | USA | 96757.740117 | NaN | OH | . 533 Oklahoma | US | 2021-04-11 18:31:04 | 35.5653 | -96.9289 | 442805 | 6669 | NaN | NaN | 40.0 | 11190.504050 | 3838783.0 | NaN | 1.506081 | 84000040.0 | USA | 97013.169922 | NaN | OK | . 534 Oregon | US | 2021-04-11 18:31:04 | 44.5720 | -122.0709 | 170085 | 2440 | NaN | NaN | 41.0 | 4032.612749 | 4319403.0 | NaN | 1.434577 | 84000041.0 | USA | 102410.439532 | NaN | OR | . 535 Pennsylvania | US | 2021-04-11 18:31:04 | 40.5908 | -77.2098 | 1073924 | 25393 | NaN | NaN | 42.0 | 8388.727720 | 12148589.0 | NaN | 2.364506 | 84000042.0 | USA | 94896.105597 | NaN | PA | . 536 Puerto Rico | US | 2021-04-11 18:31:04 | 18.2208 | -66.5901 | 114197 | 2154 | NaN | NaN | 72.0 | 3575.702619 | 415664.0 | NaN | 1.886214 | 630.0 | PRI | 13015.147976 | NaN | PR | . 537 Rhode Island | US | 2021-04-11 18:31:04 | 41.6809 | -71.5118 | 141097 | 2638 | NaN | NaN | 44.0 | 13319.066871 | 3680071.0 | NaN | 1.869636 | 84000044.0 | USA | 347385.924156 | NaN | RI | . 538 South Carolina | US | 2021-04-11 18:31:04 | 33.8569 | -80.9450 | 562691 | 9276 | NaN | NaN | 45.0 | 10928.767844 | 5822980.0 | NaN | 1.648507 | 84000045.0 | USA | 113095.813828 | NaN | SC | . 539 South Dakota | US | 2021-04-11 18:31:04 | 44.2998 | -99.4388 | 119705 | 1946 | NaN | NaN | 46.0 | 13531.202418 | 751549.0 | NaN | 1.625663 | 84000046.0 | USA | 84953.524465 | NaN | SD | . 540 Tennessee | US | 2021-04-11 18:31:04 | 35.7478 | -86.6923 | 822085 | 12001 | NaN | NaN | 47.0 | 12037.839422 | 7346127.0 | NaN | 1.459825 | 84000047.0 | USA | 107569.773446 | NaN | TN | . 541 Texas | US | 2021-04-11 18:31:04 | 31.0545 | -97.5635 | 2825675 | 49188 | NaN | NaN | 48.0 | 9745.091036 | 21970307.0 | NaN | 1.740752 | 84000048.0 | USA | 75770.441326 | NaN | TX | . 542 Utah | US | 2021-04-11 18:31:04 | 40.1500 | -111.8624 | 390104 | 2159 | NaN | NaN | 49.0 | 12168.094529 | 3151927.0 | NaN | 0.553442 | 84000049.0 | USA | 98314.669125 | NaN | UT | . 543 Vermont | US | 2021-04-11 18:31:04 | 44.0459 | -72.7107 | 21202 | 231 | NaN | NaN | 50.0 | 3397.816308 | 1425517.0 | NaN | 1.089520 | 84000050.0 | USA | 228452.264383 | NaN | VT | . 544 Virgin Islands | US | 2021-04-11 18:31:04 | 18.3358 | -64.8963 | 2971 | 26 | NaN | NaN | 78.0 | 2769.698326 | 90048.0 | NaN | 0.875126 | 850.0 | VIR | 83946.750196 | NaN | VI | . 545 Virginia | US | 2021-04-11 18:31:04 | 37.7693 | -78.1700 | 635552 | 10472 | NaN | NaN | 51.0 | 7445.967843 | 6680238.0 | NaN | 1.647702 | 84000051.0 | USA | 78263.993086 | NaN | VA | . 546 Washington | US | 2021-04-11 18:31:04 | 47.4009 | -121.4905 | 376230 | 5322 | NaN | NaN | 53.0 | 4940.712890 | 6115030.0 | NaN | 1.414560 | 84000053.0 | USA | 80303.557778 | NaN | WA | . 547 West Virginia | US | 2021-04-11 18:31:04 | 38.4912 | -80.9545 | 146169 | 2745 | NaN | NaN | 54.0 | 8156.083178 | 2571730.0 | NaN | 1.877963 | 84000054.0 | USA | 143499.947270 | NaN | WV | . 548 Wisconsin | US | 2021-04-11 18:31:04 | 44.2685 | -89.6165 | 644901 | 7379 | NaN | NaN | 55.0 | 11076.141009 | 7847462.0 | NaN | 1.144207 | 84000055.0 | USA | 134779.750187 | NaN | WI | . 549 Wyoming | US | 2021-04-11 18:31:04 | 42.7560 | -107.3025 | 56873 | 701 | NaN | NaN | 56.0 | 9826.715438 | 698827.0 | NaN | 1.232571 | 84000056.0 | USA | 120745.768100 | NaN | WY | . df_us_states_test[&quot;state_name&quot;] = df_us_states_test[&quot;state&quot;].apply(lambda x: get_state_name(x)) df_us_states_test.head(2) . date state positive probableCases negative pending totalTestResultsSource totalTestResults hospitalizedCurrently hospitalizedCumulative ... deathIncrease hospitalizedIncrease hash commercialScore negativeRegularScore negativeScore positiveScore score grade state_name . 15632 2020-01-22 | WA | 0.0 | NaN | 0.0 | NaN | totalTestEncountersViral | 0.0 | NaN | NaN | ... | 0 | 0 | 4502685e582e68071bfe8f7e1b307bc09c16728d | 0 | 0 | 0 | 0 | 0 | NaN | Washington | . 15631 2020-01-22 | MA | NaN | NaN | NaN | NaN | totalTestsViral | 1.0 | NaN | NaN | ... | 0 | 0 | 01f5dcd6631859503ef1b62d81d49e41d12fc1bd | 0 | 0 | 0 | 0 | 0 | NaN | Massachusetts | . 2 rows × 56 columns . df_t = df_us_states_test.groupby(&#39;date&#39;).sum().reset_index() df_t . date positive probableCases negative pending totalTestResults hospitalizedCurrently hospitalizedCumulative inIcuCurrently inIcuCumulative ... totalTestResultsIncrease posNeg deathIncrease hospitalizedIncrease commercialScore negativeRegularScore negativeScore positiveScore score grade . 0 2020-01-22 | 0.0 | 0.0 | 0.0 | 0.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 1 2020-01-23 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 2 2020-01-24 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 3 2020-01-25 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 4 2020-01-26 | 0.0 | 0.0 | 0.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 315 2020-12-02 | 13711156.0 | 530350.0 | 156787587.0 | 14368.0 | 196576482.0 | 100322.0 | 570121.0 | 19680.0 | 31038.0 | ... | 1459202 | 170498743 | 2733 | 5028 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 316 2020-12-03 | 13921360.0 | 545544.0 | 158026052.0 | 15106.0 | 198404712.0 | 100755.0 | 575452.0 | 19723.0 | 31276.0 | ... | 1828230 | 171947412 | 2706 | 5331 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 317 2020-12-04 | 14146191.0 | 560291.0 | 159286709.0 | 12714.0 | 200259581.0 | 101276.0 | 580104.0 | 19858.0 | 31608.0 | ... | 1854869 | 173432900 | 2563 | 4652 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 318 2020-12-05 | 14357264.0 | 574764.0 | 160813704.0 | 13433.0 | 202429337.0 | 101190.0 | 583420.0 | 19950.0 | 31831.0 | ... | 2169756 | 175170968 | 2445 | 3316 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 319 2020-12-06 | 14534035.0 | 583908.0 | 161986294.0 | 13592.0 | 204063869.0 | 101487.0 | 585676.0 | 20145.0 | 31946.0 | ... | 1634532 | 176520329 | 1138 | 2256 | 0 | 0 | 0 | 0 | 0 | 0.0 | . 320 rows × 47 columns . fig = go.Figure() fig.add_trace(go.Scatter(x=df_t[&#39;date&#39;], y=df_t[&#39;positive&#39;], mode=&#39;lines&#39;, name=&#39;Confirmed&#39;)) fig.add_trace(go.Scatter(x=df_t[&#39;date&#39;], y=df_t[&#39;death&#39;], mode=&#39;lines&#39;, name=&#39;Deaths&#39;)) fig.add_trace(go.Scatter(x=df_t[&#39;date&#39;], y=df_t[&#39;recovered&#39;], mode=&#39;lines&#39;, name=&#39;Recovered&#39;)) fig.add_trace(go.Scatter(x=df_t[&#39;date&#39;], y=df_t[&#39;hospitalized&#39;], mode=&#39;lines&#39;, name=&#39;Hospitalized&#39;)) fig.add_trace(go.Scatter(x=df_t[&#39;date&#39;], y=df_t[&#39;total&#39;], mode=&#39;lines&#39;, name=&#39;Total Tested&#39;)) fig.update_layout( xaxis_title=&quot;&quot;, yaxis_title=&quot;Cases Count in Log Scale&quot;, title = &#39;Time Series - Confirmed, Deaths &amp; Recovered Cases in USA&#39;, yaxis_type=&#39;log&#39; ) fig.update_layout( legend=dict( x=0, y=1, traceorder=&quot;normal&quot;, #bgcolor=&quot;LightSteelBlue&quot;, bordercolor=&quot;silver&quot;, borderwidth=1 ) ) fig.update_layout(margin={&quot;r&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.show() . fig = go.Figure() fig.add_trace(go.Scatter(x=df_t[&#39;date&#39;], y=df_t[&#39;recovered&#39;]/df_t[&#39;positive&#39;]*100, mode=&#39;lines&#39;, name=&#39;Recovery Rate&#39;)) fig.add_trace(go.Scatter(x=df_t[&#39;date&#39;], y=df_t[&#39;death&#39;]/df_t[&#39;positive&#39;]*100, mode=&#39;lines&#39;, name=&#39;Death Rate&#39;)) fig.update_layout( xaxis_title=&quot;&quot;, yaxis_title=&quot;Recovery/Death Rate Percentage (%)&quot;, title = &#39;Time Series - Recovery and Death Rate in USA&#39;, yaxis_type=&#39;log&#39; ) fig.update_layout( legend=dict( x=0, y=1, traceorder=&quot;normal&quot;, #font=dict( # family=&quot;sans-serif&quot;, # size=12, # color=&quot;black&quot; #), #bgcolor=&quot;LightSteelBlue&quot;, bordercolor=&quot;silver&quot;, borderwidth=1 ) ) fig.update_layout(margin={&quot;r&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}) fig.show() . df_t = df_us_states_test.groupby([&#39;state_name&#39;, &#39;date&#39;]).sum().reset_index() df_t[&quot;date_reported&quot;] = pd.to_datetime(df_t[&quot;date&quot;]).dt.strftime(&#39;%m/%d/%Y&#39;) df_t[&#39;state&#39;] = df_t[&#39;state_name&#39;].apply(lambda x: get_state_codes(x)) # while calculating mortality rate, adding 1 to confirmed to avoid divide by zero df_t[&#39;mortality_rate&#39;] = df_t[&#39;death&#39;] / (df_t[&#39;positive&#39;]+1) * 100 df_t2 = df_t.groupby([&#39;date&#39;, &#39;state_name&#39;]).max().reset_index() df_t2.sort_values(&#39;date&#39;, ascending=False).head() . date state_name positive probableCases negative pending totalTestResults hospitalizedCurrently hospitalizedCumulative inIcuCurrently ... hospitalizedIncrease commercialScore negativeRegularScore negativeScore positiveScore score grade date_reported state mortality_rate . 15632 2020-12-06 | Wyoming | 36317.0 | 4756.0 | 144576.0 | 0.0 | 417627.0 | 212.0 | 852.0 | 0.0 | ... | 9 | 0 | 0 | 0 | 0 | 0 | 0.0 | 12/06/2020 | WY | 0.707638 | . 15604 2020-12-06 | Montana | 67875.0 | 0.0 | 620339.0 | 0.0 | 688214.0 | 475.0 | 2836.0 | 77.0 | ... | 21 | 0 | 0 | 0 | 0 | 0 | 0.0 | 12/06/2020 | MT | 1.084330 | . 15602 2020-12-06 | Mississippi | 164931.0 | 37611.0 | 982395.0 | 0.0 | 1147326.0 | 1157.0 | 7486.0 | 286.0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 12/06/2020 | MS | 2.401596 | . 15601 2020-12-06 | Minnesota | 350862.0 | 8459.0 | 2301135.0 | 0.0 | 4431677.0 | 1679.0 | 18233.0 | 367.0 | ... | 174 | 0 | 0 | 0 | 0 | 0 | 0.0 | 12/06/2020 | MN | 1.135486 | . 15600 2020-12-06 | Michigan | 426576.0 | 31540.0 | 6538482.0 | 0.0 | 6965058.0 | 4141.0 | 0.0 | 855.0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0.0 | 12/06/2020 | MI | 2.419493 | . 5 rows × 51 columns . fig = px.choropleth(df_t2, locations=&quot;state&quot;, locationmode=&#39;USA-states&#39;, scope=&quot;usa&quot;, hover_name=&quot;state_name&quot;, hover_data=[&quot;positive&quot;, &quot;death&quot;, &quot;recovered&quot;], animation_frame=&quot;date&quot;, color=np.log(df_t2[&quot;positive&quot;]+1), title=&quot;US COVID-19 Progression Animation Over Time&quot;, color_continuous_scale=px.colors.sequential.Plasma, ) #fig.update_coloraxes(colorscale=&quot;hot&quot;) #fig.update(layout_coloraxis_showscale=False) fig.update_coloraxes(colorbar_title=&quot;Color&lt;br&gt;Confirmed Cases&lt;br&gt;in Log Scale&quot;) fig.show() .",
            "url": "https://chenghsu.github.io/Data-Analysis-Blog/2021/04/11/covid_prediction.html",
            "relUrl": "/2021/04/11/covid_prediction.html",
            "date": " • Apr 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chenghsu.github.io/Data-Analysis-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://chenghsu.github.io/Data-Analysis-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chenghsu.github.io/Data-Analysis-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chenghsu.github.io/Data-Analysis-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}